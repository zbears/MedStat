########################################################################################
# BLE113 code for reading pulse rate
#
# Authors: Zach Bears & Joshua Miller
########################################################################################

##############################################################
# Constants
##############################################################
const ACC_ADDR = $38 # The accelerometer I2C address (may have to be changed to $3B)
const CYCLES_PER_SEC = 32768 # Number of clock cycles/second
const CYCLES_PER_2MS = 64 # Number of clock cycles in 2 ms
const CYCLES_BETWEEN_ACCELEROMETER = 8000 # Number of cycles between successive accelerometer readings
const CYCLES_BETWEEN_MOISTURE_READINGS = 2000 # Number of cycles between moisture sensor readings
const CYCLES_PER_LED_FLASH = 12800 # Number of clock cycles for an LED flash
const SECONDS_BETWEEN_SAMPLES_DEFAULT = 10 # Number of seconds between heartrate sampling
## Timer handles
const SECOND_HANDLE=1 # The handle of the 1s timer
const SAMPLING_HANDLE=2 # The handle of the 2ms sampling timer
const LED_FLASH_HANDLE_ON=3 # The handle for a timer for an LED flash on
const LED_FLASH_HANDLE_OFF=4 # The handle for a timer for an LED flash off
const DEBOUNCE_HANDLE=5 # A handle used for button debouncing
const ACCELEROMETER_HANDLE=6 # A handle used for time between accelerometer readings
const MOISTURE_HANDLE=7 # A handle used for the time between moisture readings

## Notification Constants
const NOTIFICATION_LED_PORT=2 # The port of the notification LED
const NOTIFICATION_LED_PIN_MASK=$2 # The mask for the notification LED port

# Heartrate Constants
const HEARTRATE_ADC_NUMBER=0 # ADC 0
const HEARTRATE_ADC_RESOLUTION=2 # 10 effective bit resolution
const HEARTRATE_ADC_VREF=2 # AVDD reference

# Moisture Constants
const MOISTURE_ADC_NUMBER=1 # ADC 1
const MOISTURE_ADC_RESOLUTION=2 # 10 effective bit resolution
const MOISTURE_ADC_VREF=2 # AVDD reference

# Emergency 
const EMERGENCY_SECONDS_WAIT = 5 # Number of seconds to wait before sending an emergency signal

# Buttons
const BUTTON_PORT = 1 # The port of both buttons
const BUTTON_1_MASK = $20 # The mask for button 1
const BUTTON_2_MASK = $10 # The mask for button 2

# Threshold Defaults
const LOW_HEARTRATE_DEFAULT_THRESHOLD = 50
const HIGH_HEARTRATE_DEFAULT_THRESHOLD = 200
const LOW_MOISTURE_DEFAULT_THRESHOLD = 0
const HIGH_MOISTURE_DEFAULT_THRESHOLD = 128
const ACCELERATION_THRESHOLD = 25
const ACCELERATION_MAX = 120 # A max threshold for the accelerometer to remove occaisional noise

# BGAPI Constants
const TRUE=1
const FALSE=0
const RISING_EDGE = 0 # Rising interrupt edge value
const FALLING_EDGE = 1 # Falling interrupt edge value

########################################################################################
# Global variables
########################################################################################

dim seconds_counter # A counter used to determine the number of seconds that have elapsed
dim notification_led_state #the state of the notification LED
dim scaled_adc_val # A variable for a properly shifted ADC return value

# Sample tracking variables
dim seconds_between_samples # The number of seconds between taking subsequent samples
dim taking_sample # A flag indicating if we are currently taking a sample
dim time_in_sample # The time in ms that the sampling period has been in progress
dim sampling_enabled # A flag indicating if sampling is currently enabled on the device 

# Emergency variables
dim emergency_detected # A flag indicating if an emergency situation has been detected
dim time_since_emergency_detection # The time in seconds since the emergency was detected
dim emergency_sent  # A flag indicating if an emergency message has recently been sent

# Button handling variables
dim buttons_triggerable # A flag indicating if the buttons can be triggered. Used for digital debouncing

# Thresholding variables for moisture and pulse
dim moisture_low_threshold
dim moisture_high_threshold
dim pulse_low_threshold
dim pulse_high_threshold

# Accelerometer
dim acceleration # Magnitude of current acceleration
dim old_orientation(3) # Values of the previously observed orientation
dim current_orientation(3) # Value of the current orientation
dim acc_comm(2) # Buffer for accelerometer i2c communication

# Moisture sensing
dim moisture

# Warning variables
dim moisture_warning
dim pulse_warning

# Throwaway variables required for BGScript oddities
dim temp
dim temp1

########################################################################################
# Private variables -- Should only be modified through helper functions
########################################################################################

dim _led_blink_enabled

########################################################################################
# Accelerometer Code
########################################################################################

# Turns on the accelerometer
procedure enable_accelerometer()
	acc_comm(0:1)=$2a #CTRL_REG1 address
	acc_comm(1:1)=3 # enable accelerometer, set fast mode
	call hardware_i2c_write(ACC_ADDR,1,2,acc_comm(0:2))
end

# Turns off the accelerometer
procedure disable_accelerometer()
	acc_comm(0:1)=$2a #CTRL_REG1 address
	acc_comm(1:1)=2 # disable accelerometer, maintain fast mode
	call hardware_i2c_write(ACC_ADDR,1,2,acc_comm(0:2))
end

# Grabs the current orientation and updates the old orientation with the current orientation value 
procedure update_orientation()
	# Set the old orientation to the current orientation
	old_orientation(0:3) = current_orientation(0:3)
	# Request the new orientation from the accelerometer
	acc_comm(0:1)=$01
	call hardware_i2c_write(ACC_ADDR,0,1,acc_comm(0:1)) # Set address to beginning X_val (addr auto increments)
    call hardware_i2c_read(ACC_ADDR,1,3)(temp,temp1,current_orientation(0)) # Read orientation data
    # Calculate absolute values of orientation components
    # X
	if current_orientation(0:1) >= $F0 then
		current_orientation(0:1) = (current_orientation(0:1)^$FF)+1
	end if
	# Y
	if current_orientation(1:1) >= $F0 then
		current_orientation(1:1) = (current_orientation(1:1)^$FF)+1
	end if
	# Z
	if current_orientation(2:1) >= $F0 then
		current_orientation(2:1) = (current_orientation(2:1)^$FF)+1
	end if
end

# Calculates the current acceleration magnitude as a delta between the current and the old orientation
procedure calculate_acceleration()
	acceleration = 0
	# Take the deltas of the larger components of orientation and add them to acceleration
	# X
	if current_orientation(0:1) >= old_orientation(0:1) then
		acceleration = acceleration + current_orientation(0:1)-old_orientation(0:1)
	else
		acceleration = acceleration + old_orientation(0:1)-current_orientation(0:1)
	end if
	# Y
	if current_orientation(1:1) >= old_orientation(1:1) then
		acceleration = acceleration + current_orientation(1:1)-old_orientation(1:1)
	else
		acceleration = acceleration + old_orientation(1:1)-current_orientation(1:1)
	end if
	# Z
	if current_orientation(1:1) >= old_orientation(0:1) then
		acceleration = acceleration + current_orientation(1:1)-old_orientation(1:1)
	else
		acceleration = acceleration + old_orientation(1:1)-current_orientation(1:1)
	end if
end

# Start a 1-shot timer for taking accelerometer data
procedure start_accelerometer_timer()
	call hardware_set_soft_timer(CYCLES_BETWEEN_ACCELEROMETER,ACCELEROMETER_HANDLE,1)
end

########################################################################################
# Essential Bluetooth Connectivity Functions
########################################################################################

# handle the case of a bluetooth device disconnecting
event connection_disconnected(handle,result)
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end


########################################################################################
# Notification LED Code
########################################################################################

# Turns on notification LED
procedure turn_on_notification_LED()
	notification_led_state = 1
	call hardware_io_port_write(NOTIFICATION_LED_PORT,NOTIFICATION_LED_PIN_MASK,0)
end
# Turns off notification LED
procedure turn_off_notification_LED()
	notification_led_state = 0
	call hardware_io_port_write(NOTIFICATION_LED_PORT,NOTIFICATION_LED_PIN_MASK, NOTIFICATION_LED_PIN_MASK)
end
# Turns the notification LED on if it was off or off if it was on
procedure flip_notification_LED_state()
	if notification_led_state = 1 then
		call turn_off_notification_LED()
	else 
		call turn_on_notification_LED()
	end if
end
# Disables notification LED blinking. Also turns off notification LED
procedure disable_notification_LED_blink()
	_led_blink_enabled = 0
	call turn_off_notification_LED()
end
# Enables notification LED blinking
procedure enable_notification_LED_blink()
	_led_blink_enabled = 1
end

procedure flash_notification_LED()
	# Disable the LED
	call turn_off_notification_LED()
	# Start a timer for LED turn-on
	call hardware_set_soft_timer(CYCLES_PER_LED_FLASH,LED_FLASH_HANDLE_ON,1)
	# Start a timer for LED turn-off
	call hardware_set_soft_timer(2*CYCLES_PER_LED_FLASH,LED_FLASH_HANDLE_OFF,1)
end

########################################################################################
# Emergency Handling Code
########################################################################################

# Perform any required closing tasks when sampling is finished or canceled
procedure done_sampling()
	taking_sample = FALSE
	call disable_accelerometer()
end

# Start the process to handle an emergency situation being detected
procedure set_emergency()
	# Finish the sampling process
	call done_sampling()
	# Check to see that we aren't in a state of emergency to make sure you don't notify multiple times
	if emergency_detected = FALSE then
		call enable_notification_LED_blink()
		emergency_sent = FALSE
		emergency_detected = TRUE
		time_since_emergency_detection = 0
	end if
end
# Clear an emergency situation
procedure clear_emergency()
	call disable_notification_LED_blink()
	# Clear the emergency broadcast flag if it was previously sent
	if emergency_sent = TRUE then
		call attributes_write(emergency_value,0,4,FALSE)
		emergency_sent = FALSE
	end if
	emergency_detected = FALSE
	emergency_sent = FALSE
	time_since_emergency_detection = 0
end
# Send an emergency notification out to the Android app
procedure send_emergency_broadcast()
	if emergency_sent = FALSE then
		call attributes_write(emergency_value,0,4,TRUE)
		emergency_sent = TRUE
	end if
end

########################################################################################
# Moisture Sensing Code
########################################################################################

# Start a 1-shot timer for taking moisture data
procedure start_moisture_timer()
	call hardware_set_soft_timer(CYCLES_BETWEEN_MOISTURE_READINGS,MOISTURE_HANDLE,1)
end

# Handle the moisture sensor ADC result
event hardware_adc_result(input,value)
	# If we're using the moisture ADC
	if input = MOISTURE_ADC_NUMBER then
		# Shift the result
		scaled_adc_val = value >> 5
		# If our moisture value is uninitialized, set it to the adc result
		if moisture = 0 then
			moisture = scaled_adc_val
		else
			# Otherwise perform an average with the old data
			moisture = (moisture+scaled_adc_val)/2
		end if
		# Write our moisture value to the GATT table
		call attributes_write(moisture_value,0,4,moisture)
		# If our moisture sensor value is out of threshold range, start the warning process
		if moisture<moisture_low_threshold || moisture>moisture_high_threshold then
			moisture_warning = TRUE
			call set_emergency()
		else
			moisture_warning = FALSE
		end if
	end if
end

########################################################################################
# Heartrate Code
########################################################################################

const NUM_HEARTRATE_AVERAGED_SAMPLES = 5 # The number of samples to average together to give the heartrate
const POST_BEAT_DELAY_CYCLE_COUNT = 200 # The number of cycles to delay after a beat has been seen
const PULSE_DETECTION_THRESHOLD = 530 # The average ADC value above which we observe a pulse
const NUM_AVERAGED_BEATS = 3 # The number of heart beats to average together
const MS_PER_MINUTE = 60000
const MAX_ALLOWABLE_HEARTRATE = 150
const MIN_ALLOWABLE_HEARTRATE = 45
dim heartrate_sum
dim heartrate_sample_index
dim heartrate_beat_count
dim heartrate_delay_counter
dim ms_per_heartbeat
dim heartrate

# Clear the heartrate variables
procedure clear_heartrate_variables()
	heartrate_sum = 0
	heartrate_sample_index = 0
	heartrate_delay_counter = 0
	ms_per_heartbeat = 0
	heartrate = 0
end

# Handle the heartrate sensor ADC result
event hardware_adc_result(input, value)
	# If we're using the heartrate ADC
	if input = HEARTRATE_ADC_NUMBER then
		# If we don't have a pulse acquisition delay
		if heartrate_delay_counter<=0 then
			# Shift the result
			scaled_adc_val = value >> 5
			# Add the sample to the current sum
			heartrate_sum = heartrate_sum + scaled_adc_val
			# Increment the heartrate sample index
			heartrate_sample_index = heartrate_sample_index + 1
			# If we have 10 samples, analyze them
			if heartrate_sample_index >= NUM_HEARTRATE_AVERAGED_SAMPLES then
				heartrate_sum = heartrate_sum/NUM_HEARTRATE_AVERAGED_SAMPLES
				if heartrate_sum >= PULSE_DETECTION_THRESHOLD then
					# If we had 0 beats before, start our time counter at 0 so we can get an accurate window
					if heartrate_beat_count = 0 then
						time_in_sample = 0
					end if
					# Count a beat
					heartrate_beat_count = heartrate_beat_count + 1
					#TODO delete for test only
					call flip_notification_LED_state()
					# Add our delay before counting the next beat
					heartrate_delay_counter = POST_BEAT_DELAY_CYCLE_COUNT
					# If we've got all our high beats that we needed, figure out the heartrate
					if heartrate_beat_count >= (NUM_AVERAGED_BEATS + 1) then
						# Figure out our pulse rate
						ms_per_heartbeat = time_in_sample / NUM_AVERAGED_BEATS
						# Convert to heartrate
						heartrate = MS_PER_MINUTE/ms_per_heartbeat
						heartrate = heartrate/2
						# Trim within device allowances
						if heartrate>MAX_ALLOWABLE_HEARTRATE then
							heartrate = MAX_ALLOWABLE_HEARTRATE
						end if
						if heartrate<MIN_ALLOWABLE_HEARTRATE then
							heartrate = MIN_ALLOWABLE_HEARTRATE
						end if
						# Write the heartrate to the GATT table
						call attributes_write(c_heartrate_value,0,4,heartrate)
						
						# If our pulse sensor value is out of threshold range, start the warning process
						if heartrate<pulse_low_threshold || heartrate>pulse_high_threshold then
							pulse_warning = TRUE
							call set_emergency()
						else
							pulse_warning = FALSE
						end if
						# We're done sampling until the next round
						call done_sampling()
					end if
				end if
				# Reset variables for the next average
				heartrate_sum = 0
				heartrate_sample_index = 0
			end if
		# Otherwise, decrement the delay
		else
		 	heartrate_delay_counter = heartrate_delay_counter - 1
		end if
	end if
end

########################################################################################
# Data Sampling and Result Handling 
########################################################################################

# clear all sampling variables for the start of a new sampling interval
procedure clear_sampling_variables()
	# Flush time in current sampling perioid
	time_in_sample=0
	# Clear the old moisture averages
	moisture = 0
	# Clear the heartrate variables
	call clear_heartrate_variables()
	# Clear the number of beats
	heartrate_beat_count = 0
end

# Start a 1-shot timer for taking sampling data intervals
procedure start_sample_timer()
	call hardware_set_soft_timer(CYCLES_PER_2MS,SAMPLING_HANDLE,1)
end

# Take a data sample
procedure take_sample()
	# Flash the notification LED to indicate we are taking a reading
	call flash_notification_LED()
	# Clear out the old sample state
	call clear_sampling_variables()
	# Enable the accelerometer and flush old accelerometer orientation data
	call enable_accelerometer()
	call update_orientation()
	call update_orientation()
	call calculate_acceleration()
	# Set the sample taking flag to 1
	taking_sample = TRUE
	# Start the sampling timer
	call start_sample_timer()
	# Start the accelerometer timer
	call start_accelerometer_timer()
	# Start the moisture timer
	call start_moisture_timer()
end

# Cancel the sampling process. Performs closing tasks but makes the next sampling interval fire in half the normal time
procedure cancel_sampling()
	call done_sampling()
	seconds_counter = seconds_between_samples/2
end

# Enable data sampling
procedure enable_sampling()
	# Make the sampling timer fire instantly
	seconds_counter = seconds_between_samples
	sampling_enabled = 1
	call attributes_write(sensing_enabled,0,1,TRUE)
	call flash_notification_LED()
	# Start the sampling timer
	call hardware_set_soft_timer(CYCLES_PER_SEC,SECOND_HANDLE,0)
end

# Disable data sampling
procedure disable_sampling()
	 call done_sampling()
	 sampling_enabled = 0
	 call attributes_write(sensing_enabled,0,1,FALSE)
	 call flash_notification_LED()
	 # Stop the sampling timer
	call hardware_set_soft_timer(0,SECOND_HANDLE,0)
end

########################################################################################
# Button Handling Code
########################################################################################

# Handle an interrupt on the buttons in Port 2
event hardware_io_port_status(timestamp, port, irq, state)
	# Check to make sure one of the buttons fired it
	if buttons_triggerable && port = BUTTON_PORT && irq & ( BUTTON_2_MASK|BUTTON_1_MASK)
		# Set the digital debounce timer. We make it high to ensure presses follow our deliberate pattern
		buttons_triggerable = FALSE
		call hardware_set_soft_timer(CYCLES_PER_LED_FLASH,DEBOUNCE_HANDLE,1)
		# Clear emergency on either button being pressed
		call clear_emergency()
		# If both buttons are pressed, toggle sensing and notify user (Buttons pull to ground)
		if (state & (BUTTON_1_MASK | BUTTON_2_MASK)) = (BUTTON_1_MASK | BUTTON_2_MASK)  then
			# Increase the timout of the digital debounce timer to prevent flicker
			call hardware_set_soft_timer(CYCLES_PER_SEC,DEBOUNCE_HANDLE,1)
			if sampling_enabled = TRUE then
				call disable_sampling()
			else
				call enable_sampling()
			end if
		end if
	end if 
end

########################################################################################
# Timer Handling
########################################################################################

# Handle the heartrate check timer expiration
event hardware_soft_timer(handle)
	# Handle a 1s timer expiration
	if handle = SECOND_HANDLE then
		# Increment the seconds only if we are not taking samples
		if taking_sample = FALSE then
			seconds_counter = seconds_counter+1
		end if
		# Disable any alert we may have if no warnings are detected
		if moisture_warning = FALSE && pulse_warning = FALSE then
			call clear_emergency()
		end if
		# If we have reached our number of seconds between samples, take a sample
		if seconds_counter >= seconds_between_samples then
			# Reset the counter
			seconds_counter = 0
			# Take a sample
			call take_sample()
		end if

		# If we need to blink the notification LED, blink it
		if _led_blink_enabled then
			call flip_notification_LED_state()
		end if

		# If we're counting up to an emergency declaration, count and check to send out the warning
		if emergency_detected then
			time_since_emergency_detection = time_since_emergency_detection + 1
			if time_since_emergency_detection >= EMERGENCY_SECONDS_WAIT then
				call send_emergency_broadcast()
			end if
		end if
	end if

	# Handle a 2ms sample timer expiration
	if handle = SAMPLING_HANDLE then
		# Increment our time in the current sample
		time_in_sample=time_in_sample+2
		# Start a heartrate ADC read
		call hardware_adc_read(HEARTRATE_ADC_NUMBER,HEARTRATE_ADC_RESOLUTION,HEARTRATE_ADC_VREF)
		# If we're still sampling, set up the next 1-shot timer
		if taking_sample then
			call start_sample_timer()
		end if
	end if

	# Handle the accelerometer timer expiration
	if handle = ACCELEROMETER_HANDLE then
		# Get our new acceleration value
		call update_orientation()
		call calculate_acceleration()
		# If our acceleration is too great
		if acceleration>ACCELERATION_THRESHOLD && acceleration<ACCELERATION_MAX then
			# Stop our sampling process; the data is bad
			call cancel_sampling()
		end if
		# If we're still sampling, set up the next 1-shot timer
		if taking_sample then
			call start_accelerometer_timer()
		end if
	end if

	# Handle the moisture sensor timer expiration
	if handle = MOISTURE_HANDLE then
		# Start off a moisture sensor ADC read
		call hardware_adc_read(MOISTURE_ADC_NUMBER,MOISTURE_ADC_RESOLUTION,MOISTURE_ADC_VREF)
		# If we're still sampling, set up the next 1-shot timer
		if taking_sample then
			call start_moisture_timer()
		end if
	end if

	# Handle LED ON and OFF timers
	if handle = LED_FLASH_HANDLE_ON then
		call turn_on_notification_LED()
	end if
	if handle = LED_FLASH_HANDLE_OFF then
		call turn_off_notification_LED()
	end if

	# Handle debounce timer
	if handle = DEBOUNCE_HANDLE then
		buttons_triggerable = TRUE
	end if
end

########################################################################################
# GATT Changed Handlers
########################################################################################

# Handle changes to attributes in the GATT table
event attributes_value(connection,reason,handle,offset,value_len,value_data)
	# Handle an enable of sensing by the mobile app
	if handle = sensing_enabled then
		if value_data(0:1) = 0 then
			call disable_sampling()
		else
			call enable_sampling()
		end if
	end if
	# Handle moisture sensor threshold value changing
	if handle = moisture_threshold then
		moisture_low_threshold = value_data(0:2)
		moisture_high_threshold = value_data(2:2)
	end if
	# Handle heartrate sensor threshold value changing
	if handle = pulse_threshold then
		pulse_low_threshold = value_data(0:2)
		pulse_high_threshold = value_data(2:2)
	end if
	# Handle changes to the seconds between samples
	if handle = seconds_bn_samples then
		seconds_between_samples = value_data(0:2)
	end if
end

########################################################################################
# System Boot Code
########################################################################################
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw )
	# Set advertisement interval to 20-30ms using all channels
	call gap_set_adv_parameters(32,48,7)
	
	# Set to advertising mode for bluetooth
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)

	# Set bondable mode
	call sm_set_bondable_mode(1)

	# Initialize miscellaneous variables
	taking_sample = FALSE
	emergency_detected = FALSE
	buttons_triggerable = TRUE
	moisture_warning = FALSE
	pulse_warning = FALSE

	# Set default thresholds
	pulse_low_threshold = LOW_HEARTRATE_DEFAULT_THRESHOLD
	pulse_high_threshold = HIGH_HEARTRATE_DEFAULT_THRESHOLD
	moisture_low_threshold = LOW_MOISTURE_DEFAULT_THRESHOLD
	moisture_high_threshold = HIGH_MOISTURE_DEFAULT_THRESHOLD
	seconds_between_samples = SECONDS_BETWEEN_SAMPLES_DEFAULT

	# Write defaults to the GATT table
	call attributes_write(moisture_threshold,0,2,moisture_low_threshold)
	call attributes_write(moisture_threshold,2,2,moisture_high_threshold)
	call attributes_write(pulse_threshold,0,2,pulse_low_threshold)
	call attributes_write(pulse_threshold,2,2,pulse_high_threshold)
	call attributes_write(seconds_bn_samples,0,2,seconds_between_samples)

	# Set the notification LED pin to output mode and set it off as a default
	call hardware_io_port_config_direction(NOTIFICATION_LED_PORT,NOTIFICATION_LED_PIN_MASK)
	call disable_notification_LED_blink()
	#call enable_notification_LED_blink()

	# Set interrupt listeners on the button pins
	call hardware_io_port_irq_direction(BUTTON_PORT,RISING_EDGE)
	call hardware_io_port_irq_enable(BUTTON_PORT,BUTTON_2_MASK|BUTTON_1_MASK)
end


